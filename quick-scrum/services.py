# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/services.ipynb (unless otherwise specified).

__all__ = ['Scrum']

# Cell
from pathlib import Path
import yaml
import os
import time

# Cell
class Scrum:
    def __init__(self, home_folder):
        self.home = Path(home_folder)

    def get_projects(self):
        "Get all the projects available in the home folder"
        return [p.name for p in (self.home/'projects').iterdir() if p.is_dir()]

    def get_project(self, project_name):
        "Get the project info"
        p = self.home/'projects'/project_name/'project.yaml'
        if p.exists():
            with p.open() as f:
                return yaml.load(f, Loader=yaml.FullLoader)
        else:
            return None

    def new_project(self, project):
        n = project['name']
        p = self.home/'projects'/n
        if p.exists():
            raise ValueError(f'Project {n} already exist')

        [f.mkdir(parents=True) for f in [p, p/'backlog', p/'sandbox']]
        with (p/'project.yaml').open('w') as f:
            c = {**project, 'created': time.time()}
            yaml.dump(c, f)

    def get_sprints(self, project_name):
        "Get all the sprints in the project prj"
        return [p.name for p in (self.home/'projects'/project_name)
                .glob('sprint-*') if p.is_dir()]

    def new_sprint(self, project_name):
        "Create a new sprint"
        ss = sorted(self.get_sprints(project_name))
        if ss:
            last = ss[-1]
            (_,n) = last.split('-')
            s = f'sprint-{int(n)+1}'
        else:
            s = f'sprint-1'
        (self.home/'projects'/project_name/s).mkdir()
        return s

    def get_stories(self, project_name, store):
        "Get all the stories name for a store, i.e. backlog, sprint..."
        pp = self.home/'projects'/project_name/store
        pp = sorted(pp.glob('*.yaml'), key=os.path.getmtime)
        return [p.stem for p in pp]

    def get_story(self, project_name, store, story_name):
        "Get the content of a story"
        p = self.home/'projects'/project_name/store/f'{story_name}.yaml'
        if not p.exists():
            return None
        with p.open() as f:
            c = yaml.load(f, Loader=yaml.FullLoader)
            return {'name': story_name, **c}

    def del_story(self, project_name, store, story_name):
        p = self.home/'projects'/project_name/store/f'{story_name}.yaml'
        if p.exists():
            p.unlink()
            return True
        else:
            return False

    def set_story(self, project_name, store, story):
        name = story['name']
        p = self.home/'projects'/project_name/store/f'~{name}.yaml'
        with p.open('w') as f:
            yaml.dump(story, f)
        p = p.replace(self.home/'projects'/project_name/store/f'{name}.yaml')
        return p.stem

    def touch_story(self, project_name, store, story):
        name = story['name']
        p = self.home/'projects'/project_name/store/f'~{name}.yaml'
        p.touch()

    def move_story(self, project_name, source, target, story_name):
        "Move a story to a different container"
        p = self.home/'projects'/project_name/source/f'{story_name}.yaml'
        if p.exist():
            p.replace(self.home/'projects'/project_name/target/f'{name}.yaml')
            return True
        else:
            return False